#!/usr/bin/env groovy

/*
 * Copyright 2017-2021 CNES - CENTRE NATIONAL d'ETUDES SPATIALES
 *
 * This file is part of REGARDS.
 *
 * REGARDS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * REGARDS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with REGARDS. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Declarative Jenkinsfile. The language is Groovy.
 * Contains the definition of a Jenkins Pipeline, is checked into source control
 * and is expected to be the reference.
 * To fully support multibranch builds without issues, we are using docker-compose to setup cots for each build.
 *
 * @see https://jenkins.io/doc/book/pipeline/jenkinsfile/
 */

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }
    environment {
        PROJECT_NAME="${JOB_NAME}-${BUILD_NUMBER}"
        REGARDS_HOME="${WORKSPACE}"
        MVN_IMAGE="172.26.46.158/rs-maven-ci"
        BRANCH_NAME_VERSION="${BRANCH_NAME.replaceAll('[^A-Za-z0-9._-]', '')}-SNAPSHOT"
    }
    agent { label 'unix-integration' }
    stages {
        stage('Preparation') {
            steps {
                echo "Jenkins node name = ${env.NODE_NAME}"
                echo "Current workspace = ${env.WORKSPACE}"

                echo "Pull docker images"
                sh 'cd ' + CI_DIR + ' \
                    && docker-compose -f docker/docker-compose-cots.yml pull \
                    && docker pull ' + MVN_IMAGE

                echo "Build dependency tree"
                runMavenDockerImg("dependencies", "", false, false)

                echo "Build modules hashes"
                runMavenDockerImg("hashes", "", false, false)
            }
        }
        stage("Fast Build") {
            steps {
                echo "Build with docker profile"
                runMavenDockerImg("compile", "", false, false)

                echo "Build/Deploy docker images"
                runMavenDockerImg("deployFastDockerImages", "", false, false)
            }
        }
        stage("Tests Prepration") {
            steps {
                echo "Launch COTS"
                sh 'cd ' + CI_DIR + ' \
                    && docker-compose \
                            -f docker/docker-compose-cots.yml \
                            -p ' + PROJECT_NAME + ' \
                            up -d'
            }
        }

        stage('Run tests') {
            parallel {
                stage('-1-') {
                    stages {
                        stage('Bom') {
                            steps {
                                runMavenDockerImg("tests", "rs-bom", true, true)
                            }
                        }
                        stage('Microservice') {
                            steps {
                                runMavenDockerImg("tests", "rs-microservice", true, true)
                            }
                        }
                        stage('Cloud') {
                            steps {
                                runMavenDockerImg("tests", "rs-cloud", true, true)
                            }
                        }
                        stage('Ingest') {
                            steps {
                                runMavenDockerImg("tests", "rs-ingest", true, true)
                            }
                        }
                        stage('Access') {
                            steps {
                                runMavenDockerImg("tests", "rs-access", true, true)
                            }
                        }
                        stage('Fem') {
                            steps {
                                runMavenDockerImg("tests", "rs-fem", true, true)
                            }
                        }
                        stage('Notifier') {
                            steps {
                                runMavenDockerImg("tests", "rs-notifier", true, true)
                            }
                        }
                        stage('Worker manager') {
                            steps {
                                runMavenDockerImg("tests", "rs-worker-manager", true, true)
                            }
                        }
                    }
                }
                stage('-2-') {
                    stages {
                        stage('Admin') {
                            steps {
                                runMavenDockerImg("tests", "rs-admin", true, false)
                            }
                        }
                        stage('Dam') {
                            steps {
                                runMavenDockerImg("tests", "rs-dam", true, false)
                            }
                        }
                        stage('Catalog') {
                            steps {
                                runMavenDockerImg("tests", "rs-catalog", true, false)
                            }
                        }
                        stage('Storage') {
                            steps {
                                runMavenDockerImg("tests", "rs-storage", true, false)
                            }
                        }
                        stage('Dataprovider') {
                            steps {
                                runMavenDockerImg("tests", "rs-dataprovider", true, false)
                            }
                        }
                        stage('Order') {
                            steps {
                                runMavenDockerImg("tests", "rs-order", true, false)
                            }
                        }
                        stage('processing') {
                            steps {
                                runMavenDockerImg("tests", "rs-processing", true, false)
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy artifacts") {
            when {
                branch pattern: /(master|develop.*|release.*)/, comparator: "REGEXP"
            }
            steps {
                echo "Deploy Maven Artifacts"
                runMavenDockerImg("deployMvnArtifacts", "", false, false)
            }
        }
        stage("Deploy Docker images") {
            steps {
                echo "Build/Deploy stable docker images"
                runMavenDockerImg("deployDockerImages", "", false, false)
            }
        }
    }
    post {
	    always {
            echo 'POST-ALWAYS-TASK -- Send new successfull modules hashes to nexus'
            // Always send new successfull modules hashes to nexus
            runMavenDockerImg("updateHashes", "", false, false)
        }
        failure {
            tuleapNotifyCommitStatus status: 'failure', repositoryId: '875', credentialId: 'tuleap-ci-token'
            mattermostSend color: 'danger', message: "Build Failed - ${env.JOB_NAME}#${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", text: "Changes: \n"+getChangeString()
            echo 'POST-FAILURE-TASK -- The build FAILED, let\'s print all COTS logs'

            // Log COTS only if they are existing
            sh 'cd ' + CI_DIR + ' \
                 && if [ "$(docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' ps | grep rs-elasticsearch)" ]; then \
                        echo "########################################" \
                     && echo "#### ELASTICSEARCH" \
                     && echo "########################################" \
                     && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-elasticsearch; \
                   fi'


            sh 'cd ' + CI_DIR + ' \
                 && if [ "$(docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' ps | grep rs-postgres)" ]; then \
                        echo "########################################" \
                     && echo "#### POSTGRES" \
                     && echo "########################################" \
                     && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-postgres; \
                   fi'


            sh 'cd ' + CI_DIR + ' \
                 && if [ "$(docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' ps | grep rs-rabbitmq-first)" ]; then \
                        echo "########################################" \
                     && echo "#### RABBITMQ" \
                     && echo "########################################" \
                     && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-rabbitmq-first; \
                   fi'


            sh 'cd ' + CI_DIR + ' \
                 && if [ "$(docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' ps | grep rs-rabbitmq-second)" ]; then \
                        echo "########################################" \
                     && echo "#### RABBITMQ" \
                     && echo "########################################" \
                     && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-rabbitmq-second; \
                   fi'
        }
        success {
            tuleapNotifyCommitStatus status: 'success', repositoryId: '875', credentialId: 'tuleap-ci-token'
        }
        cleanup {
            echo 'POST-CLEANUP-TASK -- Stop CoTs'
            sh 'cd ' + CI_DIR + ' \
                 && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' down'
            echo 'POST-CLEANUP-TASK -- Rewrire owner and access rights, to avoid future build having files issues'
            sh 'chown -R jenkins:jenkins .'
            sh 'chmod -R u+rwx .'
            sh 'chmod -R g+rwx .'
        }
    }
}

@NonCPS
def getChangeString() {
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            changeString += " - ${entry.msg} [@${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

// Return the shell to execute to run a docker container using rs-maven-ci image
// @params mode Expected mode (see ci script file)
// @params regardsMs the pom submodule to restrict on
// @params isRequiringCots true when the container will use CoTs
// @params isRabbitMqIdFirst should use the first rabbitMQ
@NonCPS
def runMavenDockerImg(mode, regardsMs, isRequiringCots, isRabbitMqIdFirst) {
    // Transform PROJECT_NAME to what Docker will use for CoTS names
    // regards-oss-backend/feature%2Fimprove_jenkins_stages-31
    // become
    // regardsossbackendfeature2fimprovejenkinsstages31
    echo "Run maven container with mode=[" + mode + "] and regardsMs=[" + regardsMs + "]. This tasks will use CoTs ? [" + isRequiringCots +"]"
    def dockerProject = PROJECT_NAME.replaceAll("[^a-zA-Z0-9]", "").toLowerCase()
    def dockerCommand = 'docker run --rm -i                                                          \
                        --name ' + dockerProject + '_maven_' + regardsMs + '                         \
                        -v ${WORKSPACE}:/app_to_build                                                \
                        -v /DATA/maven-multibranch-repository:/localRepository                       \
                        -v /usr/bin/docker:/bin/docker                                               \
                        -v /var/run/docker.sock:/var/run/docker.sock                                 \
                        -e BRANCH_NAME="${BRANCH_NAME}"                                              \
                        -e BRANCH_NAME_VERSION="${BRANCH_NAME_VERSION}"                              \
                        -e WORKSPACE="${WORKSPACE}"                                                  \
                        -e CI_DIR="regards-ci/docker"                                                \
                        -e MODE="' + mode + '"                                                       \
                        -e REGARDS_HOME="${REGARDS_HOME}"                                            \
                        -e REGARDS_MS="' + regardsMs + '"                                            '
    if (isRequiringCots) {
        def rabbitMqId = isRabbitMqIdFirst ? 'first' : 'second'
        dockerCommand += '-e COTS="rs-elasticsearch:9300 rs-rabbitmq:5672 rs-postgres:5432"          \
                         --link ' + dockerProject + '_rs-rabbitmq-' + rabbitMqId + '_1:rs-rabbitmq                      \
                         --link ' + dockerProject + '_rs-elasticsearch_1:rs-elasticsearch            \
                         --link ' + dockerProject + '_rs-postgres_1:rs-postgres                      '
    }
    dockerCommand +=    ' --network="regards_IT_network"                                             \
                        ' + MVN_IMAGE
    sh dockerCommand
}
