#!/usr/bin/env bash

SCRIPTS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Allow piping through tee to forward exit statuses
set -o pipefail

source ${SCRIPTS}/utils
source ${SCRIPTS}/variables

function dependencyTree {

    set +x
    rm -f ${DATADIR}/*
    set -x

    echo -e "\nCalculating hash for dependency tree..."
    local pomsHash
    # lets find all pom
    # sort to walk an entire sub directory tree at once and not move back and forth and always walk hierarchy in the same order(important for sha1 consistency)
    # retrieve the last modif of that file from git-
    # compute sha1 of these dates
    # print only sha1 and not noise from sha1sum
    pomsHash=$(find "${SERVICES}" -type f -name pom.xml -not -path "*/target/*" -print0 \
            | sort -z | xargs -0 git --no-pager log --format=%ct | sha1sum | awk '{ print $1 }')

    # Try downloading an existing dependency tree of this pom wise version
    set -x
    curl -u ${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD} ${NEXUS_RAW}/tests/regards/dependencyTree-${pomsHash}.txt -o ${DATADIR}/dependencyTree.txt --noproxy '*' -k --fail
    dlResult=$?
    set +x

    # no existing dependency tree => lets make it!
    if [ "${dlResult}" -ge 1 ]; then
        echo -e "\nBuilding dependency tree..."
        set -x
        # we just want the dependecy tree so we deactivate everything we can think of (and version is not important here so we use JOB_ID)
        mvn -B process-classes dependency:tree -P CI -T 6 \
            -f ${SERVICES}/pom.xml \
            -Dfile.encoding=UTF-8 \
            -DcmdLineTarget=target \
            -Dincludes='fr.cnes.*' \
            -Dmaven.test.skip=true \
            -Dmaven.javadoc.skip=true \
            -Dmaven.source.skip=true \
            -Dmaven-deploy.skip=true \
            -Djacoco.skip=true \
            -Dmdep.skip=true \
            -DskipDocker=true \
            -Dasciidoctor.skip=true \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            2>&1 | tee ${DATADIR}/mvn-deptree.log
        failCheck $?
        set +x

        # parse mvn-deptree.log to find all maven module names
        if grep -q "BUILD SUCCESS" "${DATADIR}/mvn-deptree.log"; then
            # first remove maven log noise (timestamp, thread, etc)
            # parse the dependency tree (check result in nexus to understand)
            sed -r 's/^[0-9:,]*\s?\[[A-Z]*\]\s//' ${DATADIR}/mvn-deptree.log | sed -r 's/^[^-]*- //g' \
                | sed -r 's/\|  *//g' | sed -r 's/\\/+/g' | sed -r 's/^ *//g' \
                | awk '$1 ~ /^\+/ {sub(/fr.[^:]*:/, "",$2); sub(/:.*/,"", $2); print $2 "#"} $1 ~ /^fr/ {sub(/fr.[^:]*:/, "",$1); sub(/:.*/,"", $1); print "\n" $1 "=#"}' \
                | sed -r ':a;N;$!ba;s/#\n/,/g' \
                > ${DATADIR}/dependencyTree.txt

            echo "Dependency tree built."
            # upload to nexus for the next time
            curl -u ${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD} --upload-file ${DATADIR}/dependencyTree.txt ${NEXUS_RAW}/tests/regards/dependencyTree-${pomsHash}.txt --noproxy '*' -k --fail
        else
            echo "Error while building dependency tree"
            exit 1
        fi
     else
        echo "Found existing dependency tree with this hash, no need to rebuild it."
    fi
    
}

function folderHash {
    find "$1" -type f \
        ! -path '*/.idea/*' \
        ! -path '*.iml' \
        ! -path '*/.idea' \
        ! -path '*/target/*' \
        ! -path '*/builds/*' \
        ! -path '*/bin/*' \
        ! -path '*/.classpath' \
        ! -path '*/.project' \
        ! -path '*/.settings/*' \
        ! -path '*/maven-eclipse.xml' \
        ! -path '*/.flattened-pom.xml' \
        ! -path '*/.mvn/*' \
        ! -path '*/tmp/*' \
        ! -path '*/logs/*' \
        ! -path '*.log' \
        ! -path '*/README.md' \
        ! -path '*/etc/*' \
        ! -path '*/site' \
        ! -path '*/.hash' \
        ! -path '*.git*' \
        ! -path '*/LICENSE' \
        ! -path '*/license.md' \
        ! -path '*/banner.txt' \
        -print0 | sort -z | xargs -0 git --no-pager log --format=%ct | sha1sum | awk '{ print $1 }'
}

function parentHash {
    find "$1" -maxdepth 1 -type f -name "pom.xml" \
        -print0 | sort -z | xargs -0 git --no-pager log --format=%ct | sha1sum | awk '{ print $1 }'
}

function displayModule {
    echo "-----------------------------------"
    echo "|   Module : $1"
    echo "-----------------------------------"
}


function computeModuleHashes {
    echo -e "\nComputing hashes for all modules..."

    # Clean old stuff beforehand
    set -x
    rm -f "${DATADIR}/*.log"
    rm -f "${DATADIR}/hashes.tmp"
    rm -f "${DATADIR}/hashes.txt"
    set +x

    echo "${SERVICES}"
    for p in $(find "${SERVICES}" -type f -name pom.xml | grep -v target | grep -v resources); do
            name=$(xmllint $p --xpath "/*[local-name()='project']/*[local-name()='artifactId']" | cut -d '>' -f2 | cut -d '<' -f1)
            dir=$(dirname $p)
            #  Do not compute hashes for pom modules
            if ! grep -q "<packaging>pom</packaging>" $p; then
                # echo "Hashing module ${name} at ${dir}"
                echo "${name}:$(folderHash $dir)" >> "${DATADIR}/hashes.tmp"
            else 
                echo "${name}:$(parentHash $dir)" >> "${DATADIR}/hashes.tmp"
            fi
    done

    cat "${DATADIR}/hashes.tmp" | uniq | sort >> "${DATADIR}/hashes.txt"

    computeModulesToRebuild

    echo "Hashes computed."
}

function computeModulesToRebuild {

    # Try downloading an existing hashes for this job
    set -x
    rm -f ${DATADIR}/modulesToRebuild.txt
    rm -f ${DATADIR}/hashes-nexus.txt
    rm -f ${DATADIR}/hashes-nexus-new.txt
    touch ${DATADIR}/hashes-nexus.txt
    touch ${DATADIR}/modulesToRebuild.txt
    curl -u ${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD} ${NEXUS_RAW}/tests/regards/hashes-${REGARDS_VERSION}.txt -o ${DATADIR}/hashes-nexus.txt --noproxy '*' -k --fail
    set +x

    while read -r moduleWithHash; do
          module=$(echo "${moduleWithHash}" | awk -F: '{print $1}')
          found=$(grep -c "${moduleWithHash}" < "${DATADIR}/hashes-nexus.txt")
          if [[ "${found}" -eq 0 ]]; then
            artifactsThatNeedARebuild+=("$module")
          fi

    done < "${DATADIR}/hashes.txt"

    # For each module of the dependency tree check if the module is to rebuild or depends on a module to rebuild
    echo "#########################################"
    echo "# List of modules to rebuild            #"
    while read -r moduleLine; do
        name=$(echo "${moduleLine}" | awk -F= '{print $1}')
        deps=$(echo "${moduleLine}" | awk -F= '{print $2}')
        for moduleToRebuild in "${artifactsThatNeedARebuild[@]}"; do
            if [ "${name}" == "${moduleToRebuild}" ]; then
                echo "# Module to rebuild: ${name}"
                echo "${name}" >> ${DATADIR}/modulesToRebuild.txt
                break
            else
                found=$(echo ${deps} | grep ",${moduleToRebuild},")
                if [[ "${found}" != "" ]]; then
                    echo "# Module to rebuild: ${name} for dependency hash changed ${moduleToRebuild}"
                    echo "${name}" >> ${DATADIR}/modulesToRebuild.txt
                    break
                fi
            fi
        done
    done < "${DATADIR}/dependencyTree.txt"
    echo "# End                                   #"
    echo "#########################################"

}
