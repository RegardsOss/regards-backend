#!/usr/bin/env bash

SCRIPTS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Allow piping through tee to forward exit statuses
set -o pipefail

mvnPlArg=

source ${SCRIPTS}/utils
source ${SCRIPTS}/variables

# Check artifact to rebuild for :
# $1 : pom.xml file to check
function checkArtifactsRebuild {
    pomFile=$1
    module="${REGARDS_MS:-all}"
    validateFile="${DATADIR}/mvn-validate-${module}.log"
    echo -e "\nChecking artifacts for rebuild..."
    set -x
    rm -f "${validateFile}"
    set +x
    mvn validate -P docker,CI -f ${pomFile} > "${validateFile}" 2>&1
     if grep -q "BUILD SUCCESS" "${validateFile}"; then
            echo -e "BUILD SUCCESS ! \nPlease refer to the full '${validateFile}' artifact for more information"
        else
            echo "Error while executing Maven build, please refer to the full 'mvn-compile.log' artifact for more information."
            exit 1
        fi
    existingModules=($(cat "${validateFile}" | grep "< fr.cnes" | cut -d ' ' -f7 | cut -d ':' -f2))

    # Try downloading an existing hashes for this job
    nexusHashesFile=${DATADIR}/hashes-nexus-${module}.txt
    set -x
    rm -f "${nexusHashesFile}"
    touch "${nexusHashesFile}"
    curl -u "${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD}" "${NEXUS_RAW}/tests/regards/hashes-${REGARDS_VERSION}.txt" -o "${nexusHashesFile}" --noproxy '*' -k --fail
    set +x

    while read -r module; do
	    # Check if module needs to be rebuilt
	    if [[ " ${existingModules[*]} " =~ " ${module} " ]]; then
            if [[ ! -z "$mvnPlArg" ]]; then
                mvnPlArg="${mvnPlArg},"
            fi
            mvnPlArg="${mvnPlArg}:${module}"
            artifacts+=("${module}")
        fi
    done < "${DATADIR}/modulesToRebuild.txt"

    if [ ${#artifacts[@]} -eq 0 ]; then
        echo "All modules have been found in Nexus: we don't need to rebuild any !"
    else
        echo "Following ${#artifacts[@]} modules needs to be rebuilt (changed or not successfuly built since last build):"
        for i in "${!artifacts[@]}"; do
            echo "- ${artifacts[$i]}"
        done
    fi
}

function updateNexusHashes {

    set -x
    successHashes="${DATADIR}/hashes-success.txt"
    rm -f "${successHashes}"
    set +x

    set -x
    nexusHashes=${DATADIR}/hashes-nexus.txt
    rm -f "${nexusHashes}"
    touch "${nexusHashes}"
    curl -u "${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD}" "${NEXUS_RAW}/tests/regards/hashes-${REGARDS_VERSION}.txt" -o "${nexusHashes}" --noproxy '*' -k --fail
    set +x

    successModules=$(for f in "${DATADIR}"/mvn-build-*; do cat $f | sed -n -e '/Reactor Summary/,$p' | grep "SUCCESS" | grep -v "BUILD SUCCESS" | awk '{ print $6 }'; done)

    # Compile new hashes of modules that were successfully rebuilt
    for module in ${successModules}; do
        grep "^$module:" ${DATADIR}/hashes.txt;
    done > "${successHashes}"

    echo "Modules built successfully"
    cat "${successHashes}"

    declare -a hashes

    # For each module (with its new hash)
    while read -r moduleWithHash; do
        local module
        module=$(echo "${moduleWithHash}" | awk -F: '{print $1}')
        #echo "Checking hash to update for module $module"

        # Check if the module was successfully rebuilt
        newModuleWithHash=$(grep "^${module}:" < "${successHashes}")
        previousModuleWithHash=$(grep "^${module}:" <"${nexusHashes}")

        if [[ -n "${newModuleWithHash}" ]]; then
            # If so, take its new hash
            #echo "Found in successfully built modules, taking new hash ${newModuleWithHash}"
            hashes+=("${newModuleWithHash}")
        else
            moduleToRebuild=$(cat ${DATADIR}/modulesToRebuild.txt | grep "${module}")
            # If module is not to rebuild and the module has been successfully build in the previous build, add it to the success hashes to send to nexus with the previous hash
            if [ -n "${previousModuleWithHash}" ] && [ -z "$moduleToRebuild" ]; then
                hashes+=("$previousModuleWithHash")
            fi
            # If module was not successful and was not referenced on nexus before we aren't going to reference it now so do nothing
        fi
    done < "${DATADIR}/hashes.txt"

    set -x
    newSuccessHashes="${DATADIR}/new-success-hashes.txt"
    rm -f "${newSuccessHashes}"
    set +x

    # Update the hashes
    for i in "${!hashes[@]}"; do
        moduleWithHash=${hashes[$i]}
        echo "${hashes[$i]}" \
        >> "${newSuccessHashes}"
    done

    echo "Upload modules hashes to nexus"

    set -x
    curl -u "${NEXUS_DEPLOY_USER}:${NEXUS_DEPLOY_PASSWORD}" --upload-file "${newSuccessHashes}" "${NEXUS_RAW}/tests/regards/hashes-${REGARDS_VERSION}.txt" --noproxy '*' -k --fail
    set +x
}

function compile {
    if [ -z "${IGNORE_CHECK_ARTIFACT}" ]; then
        checkArtifactsRebuild "pom.xml"
    fi

    echo -e "\nRunning Maven build with CI profile ..."

    if [ -z "${IGNORE_HASH}" ] && [ -z "${mvnPlArg}" ]; then
        echo "All modules have already been built in this code version, no need to rebuild anything !"
    else
        if [ -z "${IGNORE_HASH}" ]; then
            mvnPlArgArg="-pl ${mvnPlArg}"
        else
            unset mvnPlArgArg
        fi
        set -x
        # mvn -U -B -P docker,CI  -T 6 \
        mvn -U -B -P docker,CI \
            clean install \
            -Dregards.version="${REGARDS_VERSION}" \
            -Dmaven.multiModuleProjectDirectory=${SERVICES} \
            -Dfile.encoding=UTF-8 \
            -Dmaven.test.skip=true \
            -DskipTests=true \
            -Dmaven-deploy.skip=true \
            -Djacoco.skip=true \
            -DskipDocker=true \
            -DpushImageTag=false \
            -Dasciidoctor.skip=true \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            ${mvnPlArgArg} \
            2>&1 | tee "${DATADIR}/mvn-compile.log"
        set +x

        if grep -q "BUILD SUCCESS" "${DATADIR}/mvn-compile.log"; then
            echo -e "BUILD SUCCESS ! \nPlease refer to the full 'mvn-compile.log' artifact for more information"
        else
            if [ -z "${IGNORE_HASH}" ] && grep -q "Could not find artifact" "${DATADIR}/mvn-compile.log"; then
                echo "==========================================="
                echo "==========================================="
                echo "==========================================="
                echo "==========================================="
                echo "Failed to download some dependency. Trying another time with IGNORE_HASH=true"
                echo "==========================================="
                echo "==========================================="
                echo "==========================================="
                echo "==========================================="
                IGNORE_HASH="true"
                IGNORE_CHECK_ARTIFACT="true"
                compile
                exit 0
            fi
            echo "Error while executing Maven build, please refer to the full 'mvn-compile.log' artifact for more information."
            exit 1
        fi
    fi
}

# When maven build a maven structure containing only one submodule, the build success log is not the same.
# With only one submodule there is no summary of the build. As our system calculate succeeded modules by reading those
# log files we have to simulate one.
function simulateMavenSuccessBuildLog {
    module=$1
    additionalLogFile=$2
    { 
        echo "13:27:18,366 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - Reactor Summary for ${module} :";
        echo "11:03:39,267 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - ------------------------------------------------------------------------" 
        echo "11:03:39,268 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - ${module} .................................... SUCCESS [ XX.XXXX s]"
        echo "11:03:39,277 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - ------------------------------------------------------------------------" 
        echo "11:03:39,278 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - BUILD SUCCESS"
        echo "11:03:39,278 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - ------------------------------------------------------------------------"
        echo "11:03:39,278 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - Total time:  XX:XX min"
        echo "11:03:39,279 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - Finished at: XXXX-XX-XXTXX:XX:XXZ"
        echo "11:03:39,279 [main] INFO org.apache.maven.cli.event.ExecutionEventLogger - ------------------------------------------------------------------------"
    } >> "${additionalLogFile}"
}

function tests {
    moduleToTest=${REGARDS_MS:-all}
    pomFile="${REGARDS_MS:-.}/pom.xml"
    checkArtifactsRebuild ${pomFile}
    logFile="${DATADIR}/mvn-build-${moduleToTest}.log"

    IS_SONAR_TESTS=$1
    sonarArgs=""
    if [ "${IS_SONAR_TESTS}" == "true" ]; then
        sonarArgs="org.jacoco:jacoco-maven-plugin:0.7.7.201606060606:prepare-agent \
	    sonar:sonar \
        -Dsonar.jacoco.reportPath="${SERVICES}/target/coverage-reports/jacoco-ut-${moduleToTest}.exec" \
        -Dsonar.jacoco.itReportPath="${SERVICES}/target/coverage-reports/jacoco-it-${moduleToTest}.exec" \
        -Dsonar.branch.name="develop" \
        -Djacoco.skip=false"
    else
        # Otherwise desactive Sonar 
        sonarArgs="-Djacoco.skip=true"
    fi

    set -x
    rm -f ${logFile}
    set +x
    

     if [ -z "${IGNORE_HASH}" ] && [ -z "${mvnPlArg}" ]; then
        echo "All modules have already been built in this code version, no need to rebuild anything !"
    else
        if [ -z "${IGNORE_HASH}" ]; then
            mvnPlArgArg="-pl ${mvnPlArg}"
        fi
        set -x
        mvn -U -B -P docker,CI verify \
            -f ${pomFile} \
            ${sonarArgs} \
            -Dregards.version="${REGARDS_VERSION}" \
            -Dmaven.multiModuleProjectDirectory=${SERVICES} \
            -Dfile.encoding=UTF-8 \
            -Dmaven-deploy.skip=true \
            -DskipDocker=true \
            -Dasciidoctor.skip=true \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            ${mvnPlArgArg} \
            2>&1 | tee "${logFile}"
        set +x

        multiMdule=$(echo ${mvnPlArg} | grep ",")
        if [ -n "$mvnPlArg" ] && [ -z "${multiMdule}" ]; then
            additionalLogFile="${DATADIR}/mvn-build-${REGARDS_MS:-all}-add.log"
            # Create a specific log build success for build with only one module in it to simulate success log that does not do maven.
            set -x
                rm -f "${additionalLogFile}"
                touch "${additionalLogFile}"
            set +x
            module=$(echo $mvnPlArg | cut -d: -f2)
            simulateMavenSuccessBuildLog "${module}" "${additionalLogFile}"
        fi

        if grep -q "BUILD SUCCESS" "${logFile}"; then
            echo -e "BUILD SUCCESS ! \nPlease refer to the full '${logFile}' artifact for more information"
        else
            echo "Error while executing Maven build, please refer to the full '${logFile}' artifact for more information."
            exit 1
        fi
    fi
}
# Parameters :
# $1 : "true" to run clean package before building docker image
# $2 : prefix to add on the docker tag image name.
function buildAnDeployDockerImages {
    checkArtifactsRebuild "pom.xml"
    TAG_PREFIX=$1
    echo -e "\nRunning Maven build and deploy docker images..."

    set -x
    if [[ -z "${mvnPlArg}" ]]; then
        echo "All modules have already been built in this code version, no need to rebuild anything !"
    else
        mvn -B -P docker,CI \
            docker:build \
            -Dregards.version=${REGARDS_VERSION} \
            -Dmaven.multiModuleProjectDirectory=${SERVICES} \
            -Dfile.encoding=UTF-8 \
            -Dmaven-deploy.skip=false \
            -Djacoco.skip=true \
            -DskipDocker=false \
            -Dmaven.test.skip=true \
            -DpushImageTag=true \
            -DdockerImageTags="${TAG_PREFIX}${REGARDS_VERSION}" \
            -Dasciidoctor.skip=true \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            -pl ${mvnPlArg} \
            2>&1 | tee ${DATADIR}/mvn-docker-build.log

        if grep -q "BUILD SUCCESS" "${DATADIR}/mvn-docker-build.log"; then
            echo -e "BUILD SUCCESS ! \nPlease refer to the full 'mvn-docker-build.log' artifact for more information"
        else
            echo "Error while executing Maven build, please refer to the full 'mvn-docker-build.log' artifact for more information."
            exit 1
        fi
    fi
    set +x
}

function deployMvnArtifacts {
    checkArtifactsRebuild "pom.xml"
    echo -e "\nRunning Maven deploy artifacts..."

    set -x
    if [[ -z "${mvnPlArg}" ]]; then
        echo "All modules have already been built in this code version, no need to rebuild anything !"
    else
        mvn -B -P docker,CI -T 6 \
            deploy \
            -Dregards.version=${REGARDS_VERSION} \
            -Dmaven.multiModuleProjectDirectory=${SERVICES} \
            -Dfile.encoding=UTF-8 \
            -Dmaven-deploy.skip=false \
            -Djacoco.skip=true \
            -DskipDocker=true \
            -Dmaven.test.skip=true \
            -DpushImageTag=false \
            -Dasciidoctor.skip=true \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            -pl ${mvnPlArg} \
            2>&1 | tee ${DATADIR}/mvn-deploy.log

        if grep -q "BUILD SUCCESS" "${DATADIR}/mvn-deploy.log"; then
            echo -e "BUILD SUCCESS ! \nPlease refer to the full 'mvn-deploy.log' artifact for more information"
        else
            echo "Error while executing Maven build, please refer to the full 'mvn-deploy.log' artifact for more information."
            exit 1
        fi
    fi
    set +x
}
