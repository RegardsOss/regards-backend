#!/usr/bin/env groovy

/*
 * Copyright 2017-2022 CNES - CENTRE NATIONAL d'ETUDES SPATIALES
 *
 * This file is part of REGARDS.
 *
 * REGARDS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * REGARDS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with REGARDS. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Declaratve Jenkinsfile. The language is Groovy.
 * Contains the definition of a Jenkins Pipeline, is checked into source control
 * and is expected to be the reference.
 * To fully support multibranch builds without issues, we are using docker-compose to setup cots for each build.
 *
 * @see https://jenkins.io/doc/book/pipeline/jenkinsfile/
 */

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }
    environment {
        PROJECT_NAME = "${JOB_NAME}-${BUILD_NUMBER}"
        REGARDS_HOME = "${WORKSPACE}"
        MVN_IMAGE = "172.26.46.158/regards-maven-jdk:v2"
        JAVA_IMAGE = "172.26.46.158/regards-java-alpine:17v3"
        BRANCH_NAME = "develop"
        IGNORE_HASH = "true"
    }
    agent { label 'unix-integration' }
    stages {
        stage('Preparation') {
            steps {
                echo "Jenkins node name = ${env.NODE_NAME}"
                echo "Current workspace = ${env.WORKSPACE}"

                sh label: "Pull docker images", script: 'docker-compose -f ' + CI_DIR + '/docker/docker-compose-cots.yml pull \
                    && docker pull ' + MVN_IMAGE + ' && docker pull ' + JAVA_IMAGE
            }
        }
        stage("Tests Preparation") {
            steps {
                parallel(
                        compile: {
                            runMavenDockerImgWithoutCoTS("Build with CI profile", "compile")
                        },
                        cots: {
                            sh label: "Launch COTS", script: 'docker-compose \
                                -f ' + CI_DIR + '/docker/docker-compose-cots.yml \
                                -p ' + PROJECT_NAME + ' \
                                up -d'
                        }
                )
            }
        }

        stage('Run tests') {
            parallel {
                stage('-1-') {
                    stages {
                        // Please you use here the method [...]One (runMavenDockerImgParallelOne)
                        stage('Microservice') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-microservice")
                                }
                            }
                        }
                        stage('Cloud') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-cloud")
                                }
                            }
                        }
                        stage('Ingest') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-ingest")
                                }
                            }
                        }
                        stage('Access') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-access")
                                }
                            }
                        }
                        stage('Fem') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-fem")
                                }
                            }
                        }
                        stage('Notifier') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-notifier")
                                }
                            }
                        }
                        stage('Worker manager') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-worker-manager")
                                }
                            }
                        }
                        stage('Lta manager') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-lta-manager")
                                }
                            }
                        }
                        stage('Delivery') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelOne("sonarTests", "rs-delivery")
                                }
                            }
                        }
                    }
                }
                stage('-2-') {
                    stages {
                        // Please you use here the method [...]Two (runMavenDockerImgParallelTwo)
                        stage('Admin') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-admin")
                                }
                            }
                        }
                        stage('Dam') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-dam")
                                }
                            }
                        }
                        stage('Catalog') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-catalog")
                                }
                            }
                        }
                        stage('Storage') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-storage")
                                }
                            }
                        }
                        stage('Dataprovider') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-dataprovider")
                                }
                            }
                        }
                        stage('Order') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-order")
                                }
                            }
                        }
                        stage('processing') {
                            steps {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    runMavenDockerImgParallelTwo("sonarTests", "rs-processing")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Harvest requirements reports") {
            environment {
                RQMT_DIR = "/RQMT/RQMT/${JOB_NAME}/"
            }
            steps {
                sh 'rm -rf ' + RQMT_DIR
                sh 'mkdir -p ' + RQMT_DIR
                sh 'find . -wholename \'*/target/requirement-reports/RQMT*\' -type f -exec cp {} ' + RQMT_DIR + ' \\;'
            }
        }
        stage("Harvest documentation snippets") {
            environment {
                DOC_DIR = "/RQMT/APIDoc/${JOB_NAME}/"
            }
            steps {
                sh 'rm -rf ' + DOC_DIR
                sh 'mkdir -p ' + DOC_DIR
                sh 'find . -maxdepth 6 -type d -wholename \'*/target/generated-snippets/*\' -exec cp -r {} ' + DOC_DIR + ' \\;'
            }
        }
    }
    post {
        failure {
            echo 'POST-FAILURE-TASK -- The build FAILED, let\'s print all COTS logs'

            // Log COTS only if they are existing
            sh label: "POST-FAILURE-TASK -- Print ElasticSearch logs", script: 'cd ' + CI_DIR + ' \
                && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-elasticsearch', returnStatus: true

            sh label: "POST-FAILURE-TASK -- Print Postgres logs", script: 'cd ' + CI_DIR + ' \
                && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-postgres', returnStatus: true

            sh label: "POST-FAILURE-TASK -- Print First RabbitMQ logs", script: 'cd ' + CI_DIR + ' \
                && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-rabbitmq-first', returnStatus: true

            sh label: "POST-FAILURE-TASK -- Print Second RabbitMQ logs", script: 'cd ' + CI_DIR + ' \
                && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-rabbitmq-second', returnStatus: true

            sh label: "POST-FAILURE-TASK -- Print S3 Minio logs", script: 'cd ' + CI_DIR + ' \
                && docker-compose -f docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' logs rs-minio', returnStatus: true

        }
        cleanup {
            sh label: 'POST-CLEANUP-TASK -- Stop CoTs', script: 'docker-compose -f ' + CI_DIR + '/docker/docker-compose-cots.yml -p ' + PROJECT_NAME + ' down'
            sh label: "POST-CLEANUP-TASK -- Remove maven containers", script: "/bin/bash -c 'docker ps --format \"{{ .ID }} {{ .Names }} {{ .Status }}\" | grep -E " +
                PROJECT_NAME.replaceAll("[^a-zA-Z0-9]", "").toLowerCase() + " | grep -E Up | cut -f 2 -d \" \" | xargs --no-run-if-empty docker rm -f '"
            sh label: 'POST-CLEANUP-TASK -- Rewrire owner and access rights, to avoid future build having files issues', script: 'chown -R jenkins:jenkins . \
                && chmod -R u+rwx . \
                && chmod -R g+rwx .'
        }
    }
}

// Return the shell to execute to run a docker container using rs-maven-ci image
// @params label Label to display on Blue Ocean
// @params mode Expected mode (see ci script file)
// @params containerName postfix used when creating the docker container name
// @params regardsMs the pom submodule to restrict on
// @params nbMaxCpu maximum number of cpu the container can use
// @params isRequiringCots true when the container will use CoTs
// @params isRabbitMqIdFirst should use the first rabbitMQ
@NonCPS
def runMavenDockerImg(label, mode, containerName, regardsMs, nbMaxCpu, isRequiringCots, isRabbitMqIdFirst) {
    // Transform PROJECT_NAME to what Docker will use for CoTS names
    // regards-oss-backend/feature%2Fimprove_jenkins_stages-31
    // become
    // regardsossbackendfeature2fimprovejenkinsstages31
    def dockerProject = PROJECT_NAME.replaceAll("[^a-zA-Z0-9]", "").toLowerCase()
    def dockerCommand = 'docker run --rm -i  --cpus=' + nbMaxCpu + '                                           \
                        --name ' + dockerProject + '_maven_' + regardsMs + '                                   \
                        -v ${WORKSPACE}:/app_to_build                                                          \
                        -v /DATA/maven-multibranch-repository:/localRepository                                 \
                        -v /usr/bin/docker:/bin/docker                                                         \
                        -v /var/run/docker.sock:/var/run/docker.sock                                           \
                        -e BRANCH_NAME="${BRANCH_NAME}"                                                        \
                        -e BRANCH_NAME_VERSION="${BRANCH_NAME_VERSION}"                                        \
                        -e WORKSPACE="${WORKSPACE}"                                                            \
                        -e IGNORE_HASH="${IGNORE_HASH}"                                                        \
                        -e COMPILE_MULTI_THREADS="yes"                                                         \
                        -e MODE="' + mode + '"                                                                 \
                        -e REGARDS_HOME="${REGARDS_HOME}"                                                      \
                        -e REGARDS_MS="' + regardsMs + '"                                                      '
    if (isRequiringCots) {
        def rabbitMqId = isRabbitMqIdFirst ? 'first' : 'second'
        dockerCommand += '-e COTS="rs-elasticsearch:9300 rs-rabbitmq:5672 rs-postgres:5432 rs-minio:9000"   \
                         --link ' + dockerProject + '_rs-rabbitmq-' + rabbitMqId + '_1:rs-rabbitmq             \
                         --link ' + dockerProject + '_rs-elasticsearch_1:rs-elasticsearch                      \
                         --link ' + dockerProject + '_rs-minio_1:rs-minio                                \
                         --link ' + dockerProject + '_rs-postgres_1:rs-postgres                                '
    }
    dockerCommand += ' --network="regards_IT_network"                                                       \
                        ' + MVN_IMAGE
    sh script: dockerCommand, label: label
}

// Use it when you don't need any COTS
def runMavenDockerImgWithoutCoTS(taskMainLabel, mode) {
    def label = taskMainLabel + " using maven container with mode=[" + mode + "]"
    runMavenDockerImg(label, mode, mode, "", 4, false, false)
}

// Use it when you want CoTS and you are the parallel "One"
def runMavenDockerImgParallelOne(mode, regardsMs) {
    def label = "Run " + mode + " on [" + regardsMs + "] using maven container. This tasks use CoTs and first RabbitMQ"
    runMavenDockerImg(label, mode, regardsMs, regardsMs, 2, true, true)
}

// Use it when you want CoTS and you are the parallel "Two"
def runMavenDockerImgParallelTwo(mode, regardsMs) {
    def label = "Run " + mode + " on [" + regardsMs + "] using maven container. This tasks use CoTs and second RabbitMQ"
    runMavenDockerImg(label, mode, regardsMs, regardsMs, 2, true, false)
}
